public class Droite {
	private double a,b,c;
	
	public Droite(Point A,Point B) {
		// aX + bY + c = 0
		b = -B.getX() + A.getX();
		a = B.getY() - A.getY();
		c = -a*A.getX()-b*A.getY();
	}
	
	public Droite(int a,int b,int c){
		this.a = a;
		this.b = b;
		this.c = c;
	}
	
	public void afficheDroite(){
		System.out.println("eq = "+a+ "X + "+ b +"Y +"+c+" = 0" );
	}
	
	public int appartient(Point p){
		double res = a*p.getX()+b*p.getY()+c;
		if(res == 0)
			return 0;
		else if (res>0)
			 return 1;
		else
			 return -1;
	}
	
	public boolean intersectionDroite(Droite d1){
		boolean res = false;
		if(a/b != d1.a/d1.b){
			res = true;
		}
		return res;
	}
	
	public Point pointIntersectionDroite(Droite d2){
		double x = 0;
		double y = 0;
		if(a == 0 && (b != 0 )){
			y = -(c/b);
			if(d2.a != 0)
				x = (((-d2.b/d2.a)*y)-(d2.c/d2.a));
		}
		else if(b == 0 && a != 0){
			x = -(c/a);
			if(d2.b != 0)
				y = (((-d2.a/d2.b)*x)-(d2.c/d2.b));
		}				
		else if(d2.a == 0 && d2.b != 0){
			y = -(d2.c/d2.b);
			if(a != 0)
				x = (((-b/a)*y)-(c/a));
		}
		else if(d2.b == 0 && d2.a != 0){
			x = -(d2.c/d2.a);
			if(b != 0)
				y = (((-a/b)*x)-(c/b));
		}
		else{
			x = ((d2.c/d2.b)-(c/b))/((a/b)-(d2.a/d2.b));
			y = ((-a/b)*x) - (c/b);
		}
		return new Point(x, y);
	}
	
	public boolean intersectionSegments(Point A,Point B,Point C,Point D){
		Droite d1 = new Droite(A, B);
		Droite d2 = new Droite(C, D);
		boolean res = false;
		if(d1.intersectionDroite(d2)){
			Point p = d1.pointIntersectionDroite(d2);
			if(appartientSegment(p, A, B) && appartientSegment(p, C, D))
				res = true;
		}
		return res;
	}
	
	private boolean appartientSegment(Point p,Point A,Point B){
		boolean res = false;
		Droite d = new Droite(A, B);
		if(d.appartient(p) == 0){
			if((p.getY() <= max(A.getY(),B.getY())) && (p.getX() <= max(A.getX(),B.getX())) && (p.getY() >= min(A.getY(),B.getY())) && (p.getX() >= min(A.getX(),B.getX())))
				res = true;
		}
		return res;
	}
	
	public Point pointIntersectionsegment(Point A,Point B,Point C,Point D){
		Droite d1 = new Droite(A, B);
		Droite d2 = new Droite(C, D);
		Point p = d1.pointIntersectionDroite(d2);
		if(A.egale(p))
			System.out.println("le point d'intersection est le point A");
		else if(B.egale(p))
			System.out.println("le point d'intersection est le point B");
		else if(C.egale(p))
			System.out.println("le point d'intersection est le point C");
		else if(D.egale(p))
			System.out.println("le point d'intersection est le point D");
		else
			System.out.println("le point d'intersection n'est ni A ni B ni C ni D");
		return p;
	}
	
	private double max(double a,double b){
		double res = a;
		if(b > a)
			res = b;
		return res;
	}
	
	private double min(double a,double b){
		double res = a;
		if(a > b)
			res = b;
		return res;
	}
	
}
