--------------------------- EXO 1.1 -----------------------------
47 / 8 : resultat du quotient de 47 par 8.
47 %/% 8 : resulatat entier du quotient de 47 par 8.
47 %% 8 : reste du quotient de 47 par 8.
x + 2 : rajoute 2 à tous les éléments de x.
y * 3 : multiplie par 3 tous les éléments de y .
length(x) : retourne la taille de x.
z : affiche les éléments de z.
c(z) : affiche les éléments de z.
c(z,z) : affiche en double les éléments de z.
w(z,z) : crée un nouvelle ensemble w contenant les éléments de x et y.
(w = c(x,y)) : crée un nouvelle ensemble w contenant les éléments de x et y.
x + z : fait la somme des élément de x avec z
x + y : fait la somme des élément de x avec y
b "b <- y < 5" : compare les éléments de y par rapport à 5.
y > 7 :compare les éléments de y par rapport à 7.
y[y>7] : retourne les éléments dont la valeurs est suppérieur à 7.
y[b] : retourne les éléments dont la valeurs est inférieur à 5.
x[b] : retourne les éléments dont la valeurs est inférieur à 5.
sum(x>5) : retourne le nombre éléments dont la valeur est supérieur à 5.
sum(x[x>5]) : retourne les éléments dont la valeurs est suppérieur à 5.
sum( x>5 | x<3 ) : retourne le nombre éléments dont la valeur est supérieur à 5 et inférieur à 3.
x > 5 & x < 3 : retourne les nombres dont la valeurs est comprises entre 3 et 5.
sum( x>5 & x<3 ) : retourne le nombre d'élément dont la valeurs est comprises entre 3 et 5.
y[3] : retourne l'élément à l'indice 3.
y[-3] : retrourne l'ensemble y sans l'élément à l'indice 3.
y[x] : retourne les élements dont les indices sont éléments de x.
class(x) : retourne le type de x.
class(b) : retourne le type de b.
as.integer(b) : transforme les résultats booléens(true,false) en entier (0,1).
is.numeric(x) : teste si x est de type numéric.

--------------------------- EXO 1.2 -----------------------------
1)
y0 = seq(-3,20)
y1 = seq(2,18,by=2)
y2 = rep(4,8)
y3 = seq(0,16,length.out = 8)
----y3 = seq(0,16,by = 16/8)  ne marche pas car il y a 9 éléments entre 0 et 16 par pas de 2.

2)
