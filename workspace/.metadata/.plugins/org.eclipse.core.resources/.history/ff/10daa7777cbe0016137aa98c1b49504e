import java.awt.Color;
import java.util.Random;


public class Vaisseaux extends Entite {
	
	private int resistance;
	private Propulsion propulsion;
	private char typeDeplacement;
	private int integrite;

	public Vaisseaux(Planetes p,Color c){
		super(p,c);
		Random rand = new Random();
		resistance = Math.abs(rand.nextInt())%(Constantes.VaisseauResistanceMax-Constantes.VaisseauResistanceMin+1) + Constantes.VaisseauResistanceMin; // résistance
		integrite = rand.nextInt(resistance+1); // résistance
		propulsion = new Propulsion();
		typeDeplacement = typeDeplacement();
	} 
	
	public void setIntegrite(int nouvelleIntegrite){
		integrite = nouvelleIntegrite;
	}
	
	public int getIntegrite() {
		return integrite;
	}
	
	public void nouvelleIntegrite(int t , int p){
		integrite = min (resistance, integrite + p * t);
	}
	
	public char typeDeplacement(){
		char s = '+';
		Random r = new Random();
		int tD = r.nextInt(3); //abscisse
		switch(tD){
		case 0 : s = '+';break;
		case 1 : s = 'x';break;
		case 2 : s = '*';break;
		}
		return s;
	}
	
	public char getTypeDeplacement(){
		return typeDeplacement;
	}
	
	public int getResistance(){
		return resistance;
	}
	
	public Propulsion getPropulsion(){
		return propulsion;
	}
	
	public boolean verifCarburant(){
		boolean res = false;
		if(getPropulsion().getCarburant() > 0){
			res = true;
		}
		return res;
	}
	
	private void sensHaut(){
		int ancien = ord;
		int tmp = ord - getPropulsion().positionAtteinte();
		tmp = recadrerOrdonnee(tmp);
		if(!occupee(abs, tmp)){
			ord = tmp;
			viderCase(Constantes.Largeur*ancien + abs);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ancien + abs, Constantes.Largeur*ord + abs);
		}
	}
	
	private void sensBas(){
		int ancien = ord;
		int tmp = ord + getPropulsion().positionAtteinte();
		tmp = recadrerOrdonnee(tmp);
		if(!occupee(abs, tmp)){
			ord = tmp;
			viderCase(Constantes.Largeur*ancien + abs);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ancien + abs, Constantes.Largeur*ord + abs);
		}
	}
	
	private void sensGauche(){
		int ancien = abs;
		int tmp = abs - getPropulsion().positionAtteinte();
		tmp = recadrerAbscisse(tmp);
		if(!occupee(tmp, ord)){
			abs = tmp;
			viderCase(Constantes.Largeur*ord + ancien);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ord + ancien, Constantes.Largeur*ord + abs);
		}
	}
	
	private void sensDroit(){
		int ancien = abs;
		int tmp = abs + getPropulsion().positionAtteinte();
		tmp = recadrerAbscisse(tmp);
		if(!occupee(tmp, ord)){
			abs = tmp;
			viderCase(Constantes.Largeur*ord + ancien);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ord + ancien, Constantes.Largeur*ord + abs);
		}
	}
	
	private void sensDiagonale1(){
		int ancien1 = abs;
		int ancien2 = ord;
		int tmp1 = getPropulsion().getPortee();
		int x = abs + tmp1;
		int y = ord - tmp1;
		x = recadrerAbscisse(x);
		y = recadrerOrdonnee(y);
		if(!occupee(x, y)){
			abs = x;
			ord = y;
			viderCase(Constantes.Largeur*ancien2 + ancien1);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ancien2 + ancien1, Constantes.Largeur*ord + abs);
		}
	}
	
	private void sensDiagonale2(){
		int ancien1 = abs;
		int ancien2 = ord;
		int tmp1 = getPropulsion().getPortee();
		int x = abs + tmp1;
		int y = ord + tmp1;
		x = recadrerAbscisse(x);
		y = recadrerOrdonnee(y);
		if(!occupee(x, y)){
			abs = x;
			ord = y;
			viderCase(Constantes.Largeur*ancien2 + ancien1);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ancien2 + ancien1, Constantes.Largeur*ord + abs);
		}
	}
	
	private void sensDiagonale3(){
		int ancien1 = abs;
		int ancien2 = ord;
		int tmp1 = getPropulsion().getPortee();
		int x = abs - tmp1;
		int y = ord + tmp1;
		x = recadrerAbscisse(x);
		y = recadrerOrdonnee(y);
		if(!occupee(x, y)){
			abs = x;
			ord = y;
			viderCase(Constantes.Largeur*ancien2 + ancien1);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ancien2 + ancien1, Constantes.Largeur*ord + abs);
		}
	}
	
	private void sensDiagonale4(){
		int ancien1 = abs;
		int ancien2 = ord;
		int tmp1 = getPropulsion().getPortee();
		int x = abs - tmp1;
		int y = ord - tmp1;
		x = recadrerAbscisse(x);
		y = recadrerOrdonnee(y);
		if(!occupee(x, y)){
			abs = x;
			ord = y;
			viderCase(Constantes.Largeur*ancien2 + ancien1);
			ajoutCase(getNumeroEntite());
			modifPositionEntite(Constantes.Largeur*ancien2 + ancien1, Constantes.Largeur*ord + abs);
		}
	}
	
	private void lineaire(){
		Random rd = new Random();
		int sens = rd.nextInt(4);//sens de placement
		switch(sens){
		case 0 :sensHaut();break;
		case 1 :sensDroit();break;
		case 2 :sensBas();break;
		case 3 :sensGauche();break;
		}
	}
	
	private void diagonale(){
		Random rd = new Random();
		int sens = rd.nextInt(4);//sens de placement
		switch(sens){
		case 0 :sensDiagonale1();break;
		case 1 :sensDiagonale2();break;
		case 2 :sensDiagonale3();break;
		case 3 :sensDiagonale4();break;
		}
	}
	
	private void omnidirectionnelle(){
		Random rd = new Random();
		int sens = rd.nextInt(8);//sens de placement
		switch(sens){
		case 0 :sensHaut();break;
		case 1 :sensDiagonale1();break;
		case 2 :sensDroit();break;
		case 3 :sensDiagonale2();break;
		case 4 :sensBas();break;
		case 5 :sensDiagonale3();break;
		case 6 :sensGauche();break;
		case 7 :sensDiagonale4();break;
		}
	}
	
	private void deplace(){
		switch(typeDeplacement){
		case '+' :lineaire();break;	
		case 'x' :diagonale();break;
		case '*' :omnidirectionnelle();break;
		}
	}
	
	public void deplacement(){
		if(verifCarburant()){
			getPropulsion().diminuerCarburant();
			deplace();
		}
	}
	
	public int caseCible(){
		int caseCible = 0;
		int pos = getNumeroEntite();
		int posAbs = retrouverAbs(pos);
		int posOrd = retrouverOrd(pos);
		Random rd = new Random();
		int haz = 3;// rd.nextInt(8);//case cible de placement
		switch(haz){
		case 0 :
			posAbs -= 1;
			caseCible = ajusteCaseCible(getNumeroEntite());break;
		case 1 :caseCible = ajusteCaseCible(getNumeroEntite());break;
		case 2 :caseCible = ajusteCaseCible(getNumeroEntite());break;
		case 3 :caseCible = ajusteCaseCible(getNumeroEntite());break;
		case 4 :caseCible = ajusteCaseCible(getNumeroEntite());break;
		case 5 :caseCible = ajusteCaseCible(getNumeroEntite());break;
		case 6 :caseCible = ajusteCaseCible(getNumeroEntite());break;
		case 7 :caseCible = ajusteCaseCible(getNumeroEntite());break;
		}
		return caseCible;
	}	
	
	public void infligeDegat(){
		Random rand = new Random();
		int degat = rand.nextInt(3) + 1;
		integrite -= degat;
	}
	
	public void interactionVaisseaux(Empire e){
		int cible = caseCible();
		System.out.println("cible : " + cible);
		if(occupee(retrouverAbs(cible),retrouverOrd(cible))){ //verifie si la case ciblée est occupée
			System.out.println("occupée");
			if(getListeEntites(cible).getColorEntite() != getColorEntite() &&
					getListeEntites(cible).getColorEntite() != Color.white){//verifie si le vaisseaux est ennemi
				System.out.println("ennemi");
				getListeEntites(cible).infligeDegat();
			}
			else if(getListeEntites(cible).getColorEntite() == getColorEntite() && getListeEntites(cible).getTypeEntite() == 'p'){
				System.out.println("alliée");
				propulsion.rechargerCarburant();
			}
			else if(getListeEntites(cible).getColorEntite() == Color.white){
				System.out.println("inocc");
				getListeEntites(cible).modifCouleur(e.getEmpirColor());
				e.ajouterPlaneteInoccupee((Planetes)getListeEntites(cible));
			}
		}
	}
	
}







