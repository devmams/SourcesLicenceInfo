import java.awt.Color;
import java.util.ArrayList;

public class Empire {

	private Color couleur;
	private ArrayList<Planetes> planetes;
	private Planetes p;
	private ArrayList<Vaisseaux> vaisseaux;
	private Vaisseaux v1;
	private Vaisseaux v2;
	public static Entite[] listeEntites = new Entite[300];

	
	public Empire(Color col){
		couleur = col;
		planetes = new ArrayList<Planetes>();
		vaisseaux = new ArrayList<Vaisseaux>();
		p = new Planetes(couleur);
		v1 = new Vaisseaux(p,couleur);
		v2 = new Vaisseaux(p,couleur);
		ajouterPlanete(p);
		ajoutVaisseaux(v1);
		ajoutVaisseaux(v2);
	}	
	
	public void ajouterPlanete(Planetes p){
		planetes.add(p);
		listeEntites[p.getNumeroEntite()] = p;
		nouveauVaisseauxEnDeConstruction(p);
	}
	
	public Entite getListeEntites(int pos){
		return listeEntites[pos];
	}
	
	public void ajoutListeEntite(Entite e){
		listeEntites[e.getNumeroEntite()] = e;
	}
	
	public void supprListeEntite(Entite e){
		listeEntites[e.getNumeroEntite()] = null;
	}
	
	public void modifPositionEntite(int anciennePos, int nouvellePos){
		listeEntites[nouvellePos] = listeEntites[anciennePos];
		listeEntites[anciennePos] = null;
	}
	
	/*public void ajouterPlaneteInoccupee(Planetes p){
		planetes.add(p);
		nouveauVaisseauxEnDeConstruction(p);
	}*/

	public void ajoutVaisseaux(Vaisseaux v){
		vaisseaux.add(v);
		listeEntites[p.getNumeroEntite()] = p;
	}
	
	private void nouveauVaisseauxEnDeConstruction(Planetes p){
		p.vaisseauxEnConstruction(p);
	}
	
	public Color getEmpirColor(){
		return couleur;
	}
	
	public ArrayList<Planetes> getPlanetes(){
		return planetes;
	}
	
	public void autoDestruction(){
		for(int i=0 ;i<vaisseaux.size() ;i++){
			if(!vaisseaux.get(i).verifCarburant() || vaisseaux.get(i).getIntegrite() == 0){
				vaisseaux.get(i).viderCase(vaisseaux.get(i).getNumeroEntite());
				vaisseaux.remove(i);
				listeEntites[vaisseaux.get(i).getNumeroEntite()] = null;
				//vaisseaux.get(i).supprListeEntite(vaisseaux.get(i));
			}
		}
	}
	
	public void constructionVaisseaux(int t){
		for(int i=0 ; i<planetes.size() ;i++){
			if(planetes.get(i).constructionTerminee(t)){
				ajoutVaisseaux(planetes.get(i).vaisseauxConstruit());
				nouveauVaisseauxEnDeConstruction(planetes.get(i));
			}
		}
	}
	
	public ArrayList<Vaisseaux> getVaisseaux(){
		return vaisseaux;
	}
	
	
}




