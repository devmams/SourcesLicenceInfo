import java.awt.Color;
import java.util.Random;


public class Vaisseaux extends Entite {
	
	private int resistance;
	private Propulsion propulsion;
	
	public Vaisseaux(Planetes p){
		super(p);
		Random rand = new Random();
		resistance = Math.abs(rand.nextInt())%(Constantes.VaisseauResistanceMax-Constantes.VaisseauResistanceMin+1) + Constantes.VaisseauResistanceMin; // rÃ©sistance
		propulsion = new Propulsion();
	}

	public int getResistance(){
		return resistance;
	}
	
	public Propulsion getPropulsion(){
		return propulsion;
	}
	
	private boolean verifCarburant(){
		boolean res = false;
		if(getPropulsion().getCarburant() > 0){
			res = true;
		}
		return res;
	}
	
	private void lineaire(){
		Random rd = new Random();
		int sens = rd.nextInt(4);//sens de placement
		switch(sens){
		case 0 :
			int tmp = ord -getPropulsion().positionAtteinte();
			if()
			
		break;
		case 1 :
			abs += getPropulsion().positionAtteinte();
		break;
		case 2 :
			ord += getPropulsion().positionAtteinte();
		break;
		case 3 :
			abs -= getPropulsion().positionAtteinte();
		break;
		}
	}
	
	private void diagonale(){
		
	}
	
	private void omnidirectinnelle(){
		
	}
	
	private void deplace(){
		switch(typeDeplacement){
		case '+' : 
			lineaire();
		break;	
		case 'x' :
			diagonale();
		break;
		case '*' :
			omnidirectinnelle();
		break;
		}
	}
	
	public void deplacement(){
			if(verifCarburant()){
				getPropulsion().setCarburant();
				deplace();
			}
			else{
				//autoDestruction();
			}
	}
	
}
