import java.util.*;
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.Graphics.*;
import java.util.Random;

public class Game  extends Applet implements Runnable, KeyListener {
	Image offI;//nécessaire à la méthode de double buffering
	Graphics offG;//nécessaire à la méthode de double buffering
	Plateau plateau;
	
	public Game(Plateau plateau) {
		this.plateau = plateau;
	}
	
	public void init() {
	  resize(150, 300);
	  Plateau plt = new Plateau();
	  Fabrique f = new Fabrique();
	  Piece p = f.creerCarre();
	  plt.jouer(p);
	  repaint();

	  // Ajout de l'écouteur de clavier
	  this.addKeyListener(this);

	  requestFocus();

	}
	
	public void update(Graphics g){
	if(offI == null){
		offI = createImage(150, 300);
		offG = offI.getGraphics();
	}
		offG.clearRect(0, 0, 150, 300);
		paint(offG);
		g.drawImage(offI, 0, 0, null);
	}
	
	public void paint (Graphics g) {
	  for (int k=0;k<10;k++) {
		for (int l=0;l<20;l++) {
			if (plateau.getCellule(k,l).getC() == 'n') {
			   g.setColor(Color.white);
	           g.draw3DRect (15*k,15*l,15,15,true);
			}
			else{
                switch (plateau.getCellule(k,l).getC()) {
                    case 'a':     g.setColor(new Color(0,192,0));    g.fill3DRect(15*k,15*l,15,15,true); break; //vert
                    /*case 2:     g.setColor(Color.pink);            g.fill3DRect(15*k,15*l,15,15,true); break; //rouge
                    case 3:     g.setColor(new Color(0,128,224));    g.fill3DRect(15*k,15*l,15,15,true); break; //bleu
                    case 4:     g.setColor(new Color(0,192,192));    g.fill3DRect(15*k,15*l,15,15,true); break; //cyan
                    case 5:     g.setColor(Color.orange);            g.fill3DRect(15*k,15*l,15,15,true); break; //orange
                    case 6:     g.setColor(Color.darkGray);          g.fill3DRect(15*k,15*l,15,15,true); break; //gris
                    case 7:     g.setColor(Color.magenta);           g.fill3DRect(15*k,15*l,15,15,true); break; //magenta*/
                }
			}
		}
	  }
	}
	
	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
			case KeyEvent.VK_LEFT : if (p != null) {
				p = p.versLaGauche();
				//repaint();
			}
			break;
			case KeyEvent.VK_RIGHT : if (p != null) {
				p = p.versLaDroite();
				//repaint();
			}
			break;
			/*case KeyEvent.VK_UP : if (p != null) {
					p.tourned(grille);
					repaint();
				}*/
			case KeyEvent.VK_DOWN : if (p != null) {
				p = p.versLeBas();
                //repaint();
			}
	        break;
			default : repaint();
		}
		return p;
	}
	
	public void keyReleased(KeyEvent e) {
	}

	public void keyTyped(KeyEvent e) {
	}

	public void run() {
		
	}
	
	/*public void run(){
		// Boucle infinie (tant que mon_process existe et n'est pas interrompu)
		while ((Thread.currentThread()==mon_process) && (! mon_process.isInterrupted()))
		{
			p.descend(grille);
	                //sleep_time=old_sleep_time;
	                //  p.verifie_ligne(grille);
			repaint();
			try {
				Thread.sleep(sleep_time);
			}
			catch (InterruptedException e) {
				return;
			}
		}
	}*/

	
}
