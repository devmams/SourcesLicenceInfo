package Auto2;



import java.util.*;

import Auto2.Automate;


public class AutomateNonDeterministe extends Automate {
	private class Transition{
		public String symbole;  // remarque : la classe étant privée, les attributs publics 
		public int etatArrivee; // ne sont en fait accessibles que de la classe englobante
		// constructeur
		public Transition(String symb, int arrivee){
			this.symbole=symb;
			this.etatArrivee=arrivee;
		}
	}
    private ArrayList<ArrayList<Transition>> transitions; // déterministe => un seul état d'arrivée possible, défini par son indice 
                                                          // pour chaque état de départ et chaque élément de vocabulaire
    ArrayList<Integer> courant = new ArrayList<Integer>(); // l'état actuel de l'automate après quelques transitions
    boolean start; // l'automate est prêt à fonctionner ?
    
    public AutomateNonDeterministe(ArrayList<String> etats) {
        super(etats);
        transitions= new ArrayList<ArrayList<Transition>>();
        for(int i=0;i<nbEtats;i++){
        	transitions.add(new ArrayList<Transition>());
        }
        start = false;
    }
        // utilitaire de test de présence d'une transition
    private boolean transitionPresente(int depart, String symb){
    	int pos=0;
    	while(pos<transitions.get(depart).size() && !symb.equals(transitions.get(depart).get(pos).symbole)){
    		pos++;
    	}
    	return pos<transitions.get(depart).size() ;
    }
        // ajout d'une transition 
    public void ajouteTransition(String source, String mot1, String but) {
    	
		transitions.get(numeroEtat(source)).add(new Transition(mot1,numeroEtat(but)));
    }

       // initialisation de l'automate à un état donné, aucune transition n'a encore été effectuée
    public void initialise(String e) {
    	courant = new ArrayList<Integer>();
        courant.add(numeroEtat(e));
        erreur=!estInitial(e);
        errMsg="l'état "+e+" n'est pas inital";
        start = true;
    }

       // Réinitialisation de l'automate
    public void reinitialise() {
        erreur=false;
        errMsg="";
        //courant=null;
        start = false;
    }
    
    // Recherche un état initial correspondant à une première transition
    private void trouveDepart(String mot1) {
        for (int i=0;i<nbEtats;i++) {
        	if (estInitial(i)){
        		//System.out.println("mot1 : "+mot1);
        	   for (int j=0;j<transitions.get(i).size();j++){
        		    if (mot1.equals(transitions.get(i).get(j).symbole)){
        			   courant.add(i);
        			   start=true;
        		    }
        	   }
        	}
        }
        if (!start) { // Aucun état ne permet de faire la première transition
            errMsg = "Aucun état initial ne permet de faire ";  // + mot1
            erreur = true;
        }
        else {
        	erreur=false;
        }
    }

       // une suite de "mot1s" est reconnue 
       //    si les transitions se sont bien passées 
       //          et que l'état obtenu est final
    public boolean estReconnu() {
    	boolean bool = false;
    	for(int i=0 ;i<courant.size() ;i++){
    		if(estFinal(courant.get(i))){
    			bool = true;
    		}
    		if(!bool && i+1 == courant.size()){
    			errMsg="l'état "+nomEtat(courant.get(courant.size()-1)) +" n'est pas final ";// + la suite des mot1s
    		}
    	}
        return !erreur && bool;
    }
       // effectue une transition à partir de l'état courant 
       //    avec la "mot1" donnée, met à jour l'état courant
   public void transite(String mot) {
	   if (!start) {   // Si pas encore démarré
           trouveDepart(mot);   // On cherche l'état de départ candidat
       }
	   if (erreur) // on ne continue pas après la première erreur rencontrée
       { errMsg+=mot; }  // on empile les "mot1s restantes"
	   ArrayList<Integer> tmp = new ArrayList<Integer>();
	   for(int i=0 ;i<courant.size() ;i++){
	       System.out.println("etat courant "+nomEtat(courant.get(i))+" transition par "+mot);
	       for(int j=0 ; j<transitions.get(courant.get(i)).size() ;j++){
	    	   if(transitions.get(courant.get(i)).get(j).symbole.equals(mot)){
					tmp.add(transitions.get(courant.get(i)).get(j).etatArrivee);
			   }
			   else{
				   errMsg="Pas de transition de l'état "+nomEtat(courant.get(i))+" avec "+mot;// + la suite des mot1s
			   }
	       }
	   }
	   if(tmp.size() == 0){
		   errMsg="Pas de transition de l'état "+nomEtat(courant.get(courant.size()-1))+" avec "+mot;// + la suite des mot1s
		   erreur = true;
		   return;
	   }
	   courant = tmp;
    }
    
    public void determinisation(){
    	ArrayList<ArrayList<Transition>> tmpTransition;
    	String but="";
    	String symb="";
    	String butFinal="";
    	for(int i=0 ;i<nbEtats ;i++){
    		for(int j=0 ;j<transitions.get(i).size() ;j++){
    			symb=transitions.get(i).get(j).symbole;
    			for(int k=j+1 ;k<transitions.get(i).size() ;k++){
    				if(symb.equals(transitions.get(i).get(k).symbole)){
    	    			but=nomEtat(transitions.get(i).get(j).etatArrivee);
    					but+= nomEtat(transitions.get(i).get(k).etatArrivee);
	    			}
    				butFinal = but;
    			}
        		System.out.println(butFinal);	
    		}
    		
    		
    		
    		/*if(transitions.get(i).size() > 1){
    			
    		}*/
    		
    	}
    }

    @Override
    public String toString() {
        String aff="";
        for(int i=0;i<nbEtats;i++){
            aff+=nomEtat(i)+" : ";
            for (Transition t : transitions.get(i)){
                    aff+=" / "+nomEtat(i)+"-"+t.symbole+"->"+nomEtat(t.etatArrivee);    
                }
            aff+="\n"; // passage à la ligne   
        }
        return aff;
    }
}