import java.util.*;
import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.Graphics.*;
import java.util.Random;

import javax.swing.JFrame;

public class Game  extends JFrame implements Runnable, KeyListener {
	Image offI;//nécessaire à la méthode de double buffering
	Graphics offG;//nécessaire à la méthode de double buffering
	Plateau plt;
	Fabrique f;
	Piece p;

	public Game() {
		Plateau plt = new Plateau();
		Fabrique f = new Fabrique();
		Piece p = f.creerCarre();
		// Ajout de l'écouteur de clavier
		this.addKeyListener(this);
		requestFocus();
	}

	public static void main(String[] args) {
		Game g = new Game(plt);


	}

	private void jouer () {
		// Boucle infinie (tant que mon_process existe et n'est pas interrompu)
		while (true)
		{
			p = p.versLeBas();
			plt.jouer(p);
			g.repaint();
			try {
				Thread.sleep(10000);
			}
			catch (InterruptedException e) {
				return;
			}
		}
	}

	public void update(Graphics g){
		if(offI == null){
			offI = createImage(150, 300);
			offG = offI.getGraphics();
		}
		offG.clearRect(0, 0, 150, 300);
		paint(offG);
		g.drawImage(offI, 0, 0, null);
	}

	public void paint (Graphics g) {
		for (int k=0;k<10;k++) {
			for (int l=0;l<20;l++) {
				if (plateau.getCellule(k,l).getC() == 'n') {
					g.setColor(Color.white);
					g.draw3DRect (15*k,15*l,15,15,true);
				}
				else{
					switch (plateau.getCellule(k,l).getC()) {
					case 'a':     g.setColor(new Color(0,192,0));    g.fill3DRect(15*k,15*l,15,15,true); break; //vert
					/*case 2:     g.setColor(Color.pink);            g.fill3DRect(15*k,15*l,15,15,true); break; //rouge
                    case 3:     g.setColor(new Color(0,128,224));    g.fill3DRect(15*k,15*l,15,15,true); break; //bleu
                    case 4:     g.setColor(new Color(0,192,192));    g.fill3DRect(15*k,15*l,15,15,true); break; //cyan
                    case 5:     g.setColor(Color.orange);            g.fill3DRect(15*k,15*l,15,15,true); break; //orange
                    case 6:     g.setColor(Color.darkGray);          g.fill3DRect(15*k,15*l,15,15,true); break; //gris
                    case 7:     g.setColor(Color.magenta);           g.fill3DRect(15*k,15*l,15,15,true); break; //magenta*/
					}
				}
			}
		}
	}

	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_LEFT : if (p != null) {
			p = p.versLaGauche();
			//repaint();
		}
		break;
		case KeyEvent.VK_RIGHT : if (p != null) {
			p = p.versLaDroite();
			//repaint();
		}
		break;
		/*case KeyEvent.VK_UP : if (p != null) {
					p.tourned(grille);
					repaint();
				}*/
		case KeyEvent.VK_DOWN : if (p != null) {
			p = p.versLeBas();
			//repaint();
		}
		break;
		default : repaint();
		}
		return p;
	}

	public void keyReleased(KeyEvent e) {
	}

	public void keyTyped(KeyEvent e) {
	}

}
