import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JFrame;

public class Game extends JFrame implements KeyListener {

	private static final long serialVersionUID = 1L;
	Image offI;//nécessaire à la méthode de double buffering
	Graphics offG;//nécessaire à la méthode de double buffering
	Plateau plt;
	Fabrique f;
	Piece p;
	boolean res = true;

	public Game() {
		plt = new Plateau();
		f = new Fabrique();
		p = f.creerPiece();
		// Ajout de l'écouteur de clavier
		this.addKeyListener(this);
//		requestFocus();
	}

	public static void main(String[] args) {
		Game g = new Game();
		g.setVisible(true);
		g.setSize(200, 420);
	    g.setLocationRelativeTo(null);
	    g.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		g.jouer();
	}

	private void jouer () {
		// Boucle infinie (tant que mon_process existe et n'est pas interrompu)
		while(true){
			while (res){	
				plt.ajouter(p);
				repaint();
				p = p.versLeBas();
				plt.retirer(p.getAncienne());
				if(!plt.accepter(p)){
					p = p.getAncienne();
					plt.ajouter(p);
					plt.verifieLigne();
					repaint();
					p = f.creerPiece();
					if(!plt.accepter(p.versLeBas())){
						res = false;
					}
				}
				plt.ajouter(p);
				repaint();
				try {
					Thread.sleep(300);
				}
				catch (InterruptedException e) {
					return;
				}
			}
			res = true;
			repaint();
			plt = new Plateau('a');
			try {
				Thread.sleep(200);
			}
			catch (InterruptedException e) {
				return;
			}
			repaint();
			System.out.println("GAME OVER !");
		}
	}

	public void update(Graphics g){
		if(offI == null){
			offI = createImage(200, 420);
			offG = offI.getGraphics();
		}
		offG.clearRect(0, 0, 200, 420);
		paint(offG);
		g.drawImage(offI, 0, 0, null);
	}

	public void paint (Graphics g) {
		for (int k=0;k<10;k++) {
			for (int l=0;l<20;l++) {
				if (plt.getCellule(k,l).getC() == 'n') {
					g.setColor(Color.white);
					g.fill3DRect (20*k,20*l,20,20,true);
				}
				else{
					switch (plt.getCellule(k,l).getC()) {
					case 'a':     g.setColor(new Color(0,192,0));    g.fill3DRect (20*k,20*l,20,20,true); break; //vert
					case 'b':     g.setColor(Color.pink);            g.fill3DRect (20*k,20*l,20,20,true); break; //rouge
                    case 'c':     g.setColor(new Color(0,128,224));  g.fill3DRect (20*k,20*l,20,20,true); break; //bleu
                    case 'd':     g.setColor(new Color(0,192,192));  g.fill3DRect(20*k,20*l,20,20,true); break; //cyan
                    case 'e':     g.setColor(Color.orange);          g.fill3DRect(20*k,20*l,20,20,true); break; //orange
                    case 'f':     g.setColor(Color.darkGray);        g.fill3DRect(20*k,20*l,20,20,true); break; //gris
                    case 'g':     g.setColor(Color.magenta);         g.fill3DRect(20*k,20*l,20,20,true); break; //magenta*/
					}
				}
			}
		}
	}

	public void keyPressed(KeyEvent e) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_LEFT : if (p != null) {
			//p = p.versLaGauche();
			plt.retirer(p);
			if(!plt.accepter(p.versLaGauche())){
				plt.ajouter(p);
				repaint();
			}
			p = p.versLaGauche();
			plt.ajouter(p);
			repaint();
		}
		break;
		case KeyEvent.VK_RIGHT : if (p != null){
			//p = p.versLaDroite();
			plt.retirer(p.versLaDroite());
			if(!plt.accepter(p)){
				p = p.getAncienne();
			}
			plt.ajouter(p);
			repaint();		
		}
		break;
		case KeyEvent.VK_UP : if (p != null) {
			Piece tmp = p;
			p = f.rotationPiece(p);
			plt.retirer(tmp);
			if(!plt.accepter(p)){
				p = tmp;;
			}
			plt.ajouter(p);
			repaint();
		}
		case KeyEvent.VK_DOWN : if (p != null) {
			p = p.versLeBas();
			plt.retirer(p.getAncienne());
			if(!plt.accepter(p)){
				p = p.getAncienne();
			}
			plt.ajouter(p);
			repaint();
		}
		break;
		default : repaint();
		}
	}

	public void keyReleased(KeyEvent e){
	}

	public void keyTyped(KeyEvent e){
	}

}
